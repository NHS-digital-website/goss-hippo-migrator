/*

Example properties;
{"importPackageUrl": "file:///home/paul/testout/Live/import-package.zip"}
*/
package org.hippoecm.frontend.plugins.cms.admin.updater

import org.apache.commons.lang.text.StrSubstitutor
import org.apache.commons.vfs2.FileObject
import org.apache.commons.vfs2.VFS
import org.onehippo.forge.content.exim.core.impl.DefaultBinaryImportTask
import org.onehippo.forge.content.exim.core.DocumentManager
import org.onehippo.forge.content.exim.core.impl.WorkflowDocumentManagerImpl
import org.onehippo.forge.content.exim.core.util.ContentPathUtils
import org.onehippo.forge.content.exim.core.util.HippoBinaryNodeUtils
import org.onehippo.repository.update.BaseNodeUpdateVisitor

import javax.jcr.Node
import javax.jcr.Session

import uk.nhs.digital.ps.migration.MigratorImportHelper

class ImportingAssetOrImageSetFromFileUpdateVisitor extends BaseNodeUpdateVisitor {

    DocumentManager documentManager
    DefaultBinaryImportTask importTask
    String importPackageUrl
    Session session

    MigratorImportHelper migratorImportHelper

    void initialize(Session session) {
        this.session = session
        importPackageUrl = StrSubstitutor.replaceSystemProperties(parametersMap.get("importPackageUrl"))

        documentManager = new WorkflowDocumentManagerImpl(session)
        importTask = new DefaultBinaryImportTask(documentManager)
        importTask.setLogger(log)
        importTask.start()

        migratorImportHelper = new MigratorImportHelper(log)
    }

    boolean doUpdate(Node node) {
        def contentNode
        def binaryPrimaryTypeName
        def binaryFolderPrimaryTypeName
        def binaryFolderFolderTypes
        def binaryFolderGalleryTypes
        def binaryLocation
        def binaryFolderPath
        def binaryName
        def updatedBinaryLocation

        log.info "Temporary disk space available before download: ${migratorImportHelper.getUsableSpace()}"

        final String nesstarEximFilesPath = migratorImportHelper.obtainMigrationPackage(importPackageUrl)

        final FileObject[] files = findImportFiles(nesstarEximFilesPath)

        if (!files) {
            log.error "No files found to import in ${nesstarEximFilesPath}. Aborting with no attempt of importing anything having been made."
            return false
        }

        log.info "Document and folder files to import found: ${files.length}"
        log.info "Temporary disk space available after archive decompressed: ${migratorImportHelper.getUsableSpace()}"


        def record

        files.toSorted { left, right -> left.getName().compareTo(right.getName()) }.eachWithIndex { file, i ->
            try {

                contentNode = importTask.readContentNodeFromJsonFile(file)

                binaryPrimaryTypeName = contentNode.getPrimaryType()
                // determine the target binary handle node path to create or update binary content from the jcr:path meta property in ContentNode object.
                binaryLocation = contentNode.getProperty("jcr:path").getValue()

                // record instance to store execution status and detail of a unit of migration work item.
                // these record instances will be collected and summarized when #logSummary() invoked later.
                record = importTask.beginRecord("", binaryLocation)
                record.setAttribute("file", file.name.path)

                if (binaryPrimaryTypeName == "hippogallery:imageset" || binaryPrimaryTypeName == "hippogallery:exampleAssetSet") {
                    record.setProcessed(true)
                    // split target folder path and binary handle node name from the binaryLocation.
                    def folderPathAndName = ContentPathUtils.splitToFolderPathAndName(binaryLocation)
                    binaryFolderPath = folderPathAndName[0]
                    binaryName = folderPathAndName[1]

                    // choose proper binary node type, hippostd:foldertype and hippostd:gallerytype values for either gallery image or asset.
                    if (binaryPrimaryTypeName == "hippogallery:imageset") {
                        binaryFolderPrimaryTypeName = "hippogallery:stdImageGallery"
                        binaryFolderFolderTypes = [ "new-image-folder" ] as String[]
                        binaryFolderGalleryTypes = [ "hippogallery:imageset" ] as String[]
                    } else if (binaryPrimaryTypeName == "hippogallery:exampleAssetSet") {
                        binaryFolderPrimaryTypeName = "hippogallery:stdAssetGallery"
                        binaryFolderFolderTypes = [ "new-file-folder" ] as String[]
                        binaryFolderGalleryTypes = [ "hippogallery:exampleAssetSet" ] as String[]
                    }

                    // make sure that the binary target folder exists or created.
                    binaryFolderPath =
                            importTask.createOrUpdateBinaryFolder(binaryFolderPath, binaryFolderPrimaryTypeName,
                                    binaryFolderFolderTypes, binaryFolderGalleryTypes)

                    // create or update binary content from contentNode.
                    updatedBinaryLocation =
                            importTask.createOrUpdateBinaryFromContentNode(contentNode, binaryPrimaryTypeName,
                                    binaryFolderPath, binaryName)

                    visitorContext.reportUpdated(binaryLocation)
                    log.info "Imported binary from '${file.name.path}' to '${updatedBinaryLocation}'."
                    record.setSucceeded(true)
                } else {
                    visitorContext.reportSkipped(documentLocation)
                }
            } catch (e) {
                log.error("Failed to process record.", e)
                visitorContext.reportFailed(binaryLocation)
                record.setErrorMessage(e.toString())
            } finally {
                importTask.endRecord()
            }
        }

        return false
    }

    boolean undoUpdate(Node node) {
        throw new UnsupportedOperationException('Updater does not implement undoUpdate method')
    }

    void destroy() {
        importTask.stop()
        importTask.logSummary()
    }

    private FileObject[] findImportFiles(final String nesstarAttachmentsLocation) {

        final FileObject nesstarAttachmentsLocationFileObject = VFS.getManager().resolveFile(nesstarAttachmentsLocation)

        final FileObject[] files = importTask.findFilesByNamePattern(nesstarAttachmentsLocationFileObject, "^.+\\.json\$", 1, 10)

        return files == null ? [] : files;
    }
}
